{"version":3,"sources":["SeasonDisplay.js","Spinner.js","index.js","useLocation.js"],"names":["seasonConfig","winter","text","iconName","summer","SeasonDisplay","props","lat","month","season","Date","getMonth","_seasonConfig$season","react_default","a","createElement","className","concat","Spinner","message","defaultProps","ReactDOM","render","content","_useLocation","_React$useState","React","useState","_React$useState2","Object","slicedToArray","setLat","_React$useState3","_React$useState4","errorMessage","setErrorMessage","useEffect","window","navigator","geolocation","getCurrentPosition","position","coords","latitude","err","useLocation","src_SeasonDisplay_0","src_Spinner","document","querySelector"],"mappings":"yJAGMA,SAAe,CACjBC,OAAQ,CACJC,KAAM,cACNC,SAAU,aAEdC,OAAQ,CACJF,KAAM,aACNC,SAAU,SA0BHE,EAbO,SAAAC,GAClB,IAVeC,EAAKC,EAUdC,GAVSF,EAUUD,EAAMC,KAVXC,GAUgB,IAAIE,MAAOC,YATnC,GAAKH,EAAQ,EACdD,EAAM,EAAI,SAAU,SAGpBA,GAAO,EAAI,SAAU,UAILK,EAEAZ,EAAaS,GAAhCP,EAFmBU,EAEnBV,KAAMC,EAFaS,EAEbT,SAEd,OACIU,EAAAC,EAAAC,cAAA,OAAKC,UAAS,kBAAAC,OAAoBR,IAC9BI,EAAAC,EAAAC,cAAA,KAAGC,UAAS,qBAAAC,OAAuBd,EAAvB,WACZU,EAAAC,EAAAC,cAAA,UAAKb,GACLW,EAAAC,EAAAC,cAAA,KAAGC,UAAS,sBAAAC,OAAwBd,EAAxB,aC7BlBe,EAAU,SAACZ,GACb,OACIO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACVV,EAAMa,WAMvBD,EAAQE,aAAe,CACnBD,QAAS,cAGED,eCSfG,IAASC,OAAOT,EAAAC,EAAAC,cAnBJ,WAAM,IAGVQ,EAHUC,ECJH,WAAM,IAAAC,EACOC,IAAMC,SAAS,MADtBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GACTlB,EADSqB,EAAA,GACJG,EADIH,EAAA,GAAAI,EAEyBN,IAAMC,SAAS,IAFxCM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAETE,EAFSD,EAAA,GAEKE,EAFLF,EAAA,GAWjB,OAPAP,IAAMU,UAAW,WACbC,OAAOC,UAAUC,YAAYC,mBACzB,SAAAC,GAAQ,OAAIV,EAAOU,EAASC,OAAOC,WACnC,SAAAC,GAAG,OAAIT,EAAgBS,EAAIzB,YAEhC,IAEI,CAACZ,MAAK2B,gBDNiBW,GAAtBtC,EADMiB,EACNjB,IAAK2B,EADCV,EACDU,aAab,OATIX,EADCW,EACSrB,EAAAC,EAAAC,cAAA,qBAAamB,EAAb,KAEJ3B,EACKM,EAAAC,EAAAC,cAAC+B,EAAD,CAAevC,IAAKA,IAGrBM,EAAAC,EAAAC,cAACgC,EAAD,CAAS5B,QAAQ,mCAI3BN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcO,IAIrB,MAAQyB,SAASC,cAAc","file":"static/js/main.af8b731d.chunk.js","sourcesContent":["import './SeasonDisplay.css';\nimport React from 'react';\n\nconst seasonConfig = {\n    winter: {\n        text: \"It is cold!\",\n        iconName: 'snowflake'\n    },\n    summer: {\n        text: \"It is hot!\",\n        iconName: 'sun'\n    }\n};\n\nconst getSeason = (lat, month) => {\n    if( month > 2 && month < 9 ) {\n        return lat > 0 ? 'summer': 'winter';\n    }\n    else {\n        return lat <= 0 ? 'summer': 'winter';\n    }\n};\n\nconst SeasonDisplay = props => {\n    const season = getSeason(props.lat, new Date().getMonth());\n    const { text, iconName } = seasonConfig[season];\n\n    return(\n        <div className={`season-display ${season}`}>\n            <i className={`icon-left massive ${iconName} icon`} />\n            <h1>{text}</h1>\n            <i className={`icon-right massive ${iconName} icon`} />\n        </div>\n    );\n};\n\nexport default SeasonDisplay;","import React from 'react';\n\nconst Spinner = (props) => {\n    return(\n        <div className=\"ui active dimmer\">\n            <div className=\"ui big text loader\">\n                {props.message}\n            </div>\n        </div>\n    );\n}\n\nSpinner.defaultProps = {\n    message: \"Loading...\"\n};\n\nexport default Spinner;","import React from 'react';\nimport ReactDOM from 'react-dom'\nimport SeasonDisplay from './SeasonDisplay';\nimport Spinner from './Spinner';\nimport useLocation from './useLocation';\n\nconst App = () => {\n    const { lat, errorMessage } = useLocation();\n\n    let content;\n    if ( errorMessage ) {\n        content = <div>Error: {errorMessage} </div>;\n    }\n    else if ( lat ){\n        content =  <SeasonDisplay lat={lat} />;\n    }\n    else {\n        content = <Spinner message=\"Please accept location request\" />;\n    }\n    \n    return(\n        <div className=\"border red\">{content}</div>\n    );\n}\n\nReactDOM.render(<App />,document.querySelector(\"#root\"));","import React from 'react';\n\nexport default () => {\n    const [ lat, setLat ] = React.useState(null);\n    const [ errorMessage, setErrorMessage ] = React.useState('');\n\n    React.useEffect( () => {\n        window.navigator.geolocation.getCurrentPosition(\n            position => setLat(position.coords.latitude),\n            err => setErrorMessage(err.message)\n        )\n    }, [ ]);\n\n    return {lat, errorMessage};\n}"],"sourceRoot":""}